/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitmap.transformer;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Locale;

import static java.awt.image.BufferedImage.*;

public class App {
    public static void main(String[] args) throws IOException {
        // Black & white transfromation
        Bitmap transfromToBW = new Bitmap("app\\src\\main\\resources\\originalImage.bmp", "app\\src\\main\\resources\\BWImage.bmp", "BW");
        transfromToBW.transfromImage();

        // color INVERT transfromation
        Bitmap invertImageColor = new Bitmap("app\\src\\main\\resources\\originalImage.bmp", "app\\src\\main\\resources\\invertImage.bmp", "INVERT");
        invertImageColor.transfromImage();

        // SET border
        Bitmap setBorderForImage = new Bitmap("app\\src\\main\\resources\\originalImage.bmp", "app\\src\\main\\resources\\borderedImage.bmp", "SETBORDER");
        setBorderForImage.transfromImage();
    }

    static class Bitmap {
        private String inputFilePath;
        private String outputFilePath;
        private String transfromName;

        public Bitmap(String inputFilePath, String outputFilePath, String transfromName) {
            this.inputFilePath = inputFilePath;
            this.outputFilePath = outputFilePath;
            this.transfromName = transfromName;
        }


        public void transfromImage() {

            BufferedImage originalImage = null;
            BufferedImage convertedImage = null;

            try {
                originalImage = ImageIO.read(new File(this.inputFilePath));
                int imgWidth = originalImage.getWidth();
                int imgHeight = originalImage.getHeight();

                convertedImage = new BufferedImage(imgWidth, imgHeight, TYPE_3BYTE_BGR);

                //select conversion type
                if (this.transfromName.toUpperCase() == "BW") {
                    for (int i = 0; i < imgHeight; i++) {
                        for (int j = 0; j < imgWidth; j++) {

                            Color originalImageColor = new Color(originalImage.getRGB(j, i));
                            int red = originalImageColor.getRed();
                            int green = originalImageColor.getGreen();
                            int blue = originalImageColor.getBlue();

                            int gray = (red + green + blue) / 3;
                            Color convertedImageColor = new Color(gray, gray, gray);
                            convertedImage.setRGB(j, i, convertedImageColor.getRGB());
                        }
                    }
                } else if (this.transfromName.toUpperCase() == "SETBORDER") {
                    int borderWidth = 10;
                    for (int i = 0; i < imgHeight; i++) {
                        for (int j = 0; j < imgWidth; j++) {
//                            Color originalImageColor = new Color(originalImage.getRGB(j, i));
                            if (i <= borderWidth || j <= borderWidth || j >= (imgWidth - borderWidth) || i >= (imgHeight - borderWidth)) {
                                Color convertedImageColor = new Color(0, 0, 0);
                                convertedImage.setRGB(j, i, Color.black.getRGB());
                            } else {
                                Color originalImageColor = new Color(originalImage.getRGB(j, i));
                                int red = originalImageColor.getRed();
                                int green = originalImageColor.getGreen();
                                int blue = originalImageColor.getBlue();
                                Color convertedImageColor = new Color(red, green, blue);
                                convertedImage.setRGB(j, i, convertedImageColor.getRGB());
                            }
                        }
                    }
                } else if (this.transfromName.toUpperCase() == "INVERT") {
                    for (int i = 0; i < imgHeight; i++) {
                        for (int j = 0; j < imgWidth; j++) {
                            Color originalImageColor = new Color(originalImage.getRGB(j, i));
                            int red = 255 - originalImageColor.getRed();
                            int green = 255 - originalImageColor.getGreen();
                            int blue = 255 - originalImageColor.getBlue();
                            Color convertedImageColor = new Color(red, green, blue);
                            convertedImage.setRGB(j, i, convertedImageColor.getRGB());
                        }
                    }
                }
                ImageIO.write(convertedImage, "BMP", new File(outputFilePath));
                System.out.println(this.transfromName + " Transformation done ^_^");
            } catch (IOException e) {
                System.out.println(e);
            }
        }
    }
}
